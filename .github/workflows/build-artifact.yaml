name: Create image and save as artifact

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  release:
    types: [published]
  pull_request:
    branches: [main]
  push:
    branches: [main]
    paths:
      - render.sh
      - modify-quarto-yml.sh
      - static/**
      - Dockerfile
      - entrypoint.sh
  workflow_dispatch:
    inputs:
      tag:
        required: false
        type: string
        default: ghcr.io/hubverse-org/hub-dash-site-deployer:test
      publish:
        required: true
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TAG: ghcr.io/${{ github.repository }}:${{ github.event_name == 'pull_request' && format('pr-{0}', fromJSON(github.event.pull_request.number)) || 'test' }}
  PUBLISH: ${{ github.event_name == 'push' || github.event_name == 'release' || (github.event.workflow_dispatch.ref == '/refs/head/main' && inputs.publish) }}

jobs:
  build-image:
    permissions: read-all
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.meta.outputs.tags || inputs.tag || env.TAG }}
      labels: ${{ steps.meta.outputs.labels }}
    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v2
      - id: setup-buildx
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 #v3.10.0 
      - id: container-login
        if: ${{ env.PUBLISH }}
        name: Log in to the Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 #v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: meta
        if: ${{ env.PUBLISH }}
        name: Extract metadata (tags, labels) for Docker
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 #v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - id: name-artifact
        env:
          REPO: ${{ github.repository }}
          RELEASE: ${{ github.event_name == 'release' }}
          TAG: ${{ steps.meta.outputs.tags || inputs.tag || env.TAG }}
        run: |
          if [ -z "$RELEASE" ]; then
            echo "name=tag-release" >> "$GITHUB_OUTPUT"
          else
            tag=$(echo $TAG | sed -e "s+.*\:++")
            echo "name=tag-$tag" >> "$GITHUB_OUTPUT"
          fi
        shell: bash {0}
      - id: build
        name: Build and export
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 #v6.15.0
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ steps.meta.outputs.tags || inputs.tag || env.TAG }}
          outputs: type=docker,dest=/tmp/hub-dash-site-deployer.tar
      - id: test
        name: "Test"
        run: |
          tag=${TAG/*:/}
          docker load --input /tmp/hub-dash-site-deployer.tar
          bash tests/run.sh "ghcr.io/hubverse-org/hub-dash-site-builder:${tag}" reichlab/flusight-dashboard
      - id: upload
        name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: ${{ steps.name-artifact.outputs.name }}
          path: /tmp/hub-dash-site-deployer.tar

  test:
    needs: [build-image]
    if: ${{ github.event_name == 'pull_request' }}
    name: "Test built image against published test suite (may fail)"
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - id: check-artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: tag*
      - id: list-artifacts
        run: ls -larth artifacts
      - id: load-image
        run: |
          tag=$(ls artifacts/)
          path=$(ls artifacts/$tag/*)
          echo $tag
          docker load --input "$path"
          tests=$(mktemp)
          curl -o $tests https://raw.githubusercontent.com/hubverse-org/hub-dash-site-builder/refs/heads/main/tests/run.sh
          bash ${tests} "ghcr.io/hubverse-org/hub-dash-site-builder:${tag}" reichlab/flusight-dashboard
        shell: bash
  publish:
    needs: [build-image]
    name: "Publish Image"
    runs-on: ubuntu-latest
    if: ${{ inputs.publish || github.event_name == 'release' || github.event_name == 'push' }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - id: check-artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: tag*
      - id: container-login
        if: ${{ env.PUBLISH }}
        name: Log in to the Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 #v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: meta
        name: Extract metadata (tags, labels) for Docker
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 #v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - id: load-image
        run: |
          path=$(ls artifacts/*/*)
          docker load --input "$path"
        shell: bash
      - id: push
        name: Build and Publish
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 #v6.15.0
        with:
          tags: ${{ needs.build-image.outputs.tags }}
          push: ${{ fromJSON(env.PUBLISH) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: ${{ fromJSON(env.PUBLISH) }}


